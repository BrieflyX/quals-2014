#!/usr/bin/env ruby
$LOAD_PATH << File.join(File.dirname(__FILE__), '..', 'lib')

require 'pp'
require 'ecdsa'
require 'socket'
require 'choripan/codec'
require 'choripan/packer'

s = TCPSocket.new 'localhost', 6910
s.setsockopt(Socket::IPPROTO_TCP, Socket::TCP_NODELAY, true)

c = Choripan::Codec.new s

h = c.expect :Hello
pp h
c.write :Hello, uuid: h.uuid

pp c.expect(:Ready)

c.write :ListPostReq
postsresp = c.expect :ListPostResp
pp postsresp

c.write :ListLogReq
logsresp = c.expect :ListLogResp
pp logsresp

l = logsresp.logs.first

getreq = Choripan::Messages::GetPostReq.new uuid: l.uuid, signature: l.signature

c.write :GetPostReq, getreq
pp c.expect :GetPostResp

badgetreq = Choripan::Messages::GetPostReq.new uuid: logsresp.logs[1].uuid, signature: l.signature
c.write :GetPostReq, badgetreq
pp c.receive

logs = logsresp.logs

group = ECDSA::Group::Secp256k1
point_field = ECDSA::PrimeField.new group.order

e1 = ECDSA.normalize_digest logs[0].uuid, group.bit_length
e2 = ECDSA.normalize_digest logs[1].uuid, group.bit_length

pack = Choripan::Packer.new

up1 = pack.unpack(logs[0].signature)
up2 = pack.unpack(logs[1].signature)

s1 = up1[1]
s2 = up2[1]

raise 'wat' if up1[0] != up2[0]
r = up1[0]

m = point_field.mod((e1 - e2) / (s1 - s2))

top = point_field.mod((e1 * s2) - (e2 * s1))
bottom = point_field.inverse(r * (s1 - s2))

p = point_field.mod(top * bottom)

pp p

postsresp.uuids.each do |u|
  sig = ECDSA.sign group, p, u, rand(420)
  get_message = Choripan::Messages::GetPostReq.new(uuid: u,
                                                   signature: pack.pack(sig.r, sig.s)
                                                   )

  c.write :GetPostReq, get_message
  pp c.expect :GetPostResp
end
